version: 2.1

orbs:
  aws-s3: circleci/aws-s3@2.0.0
  aws-cli: circleci/aws-cli@2.0.0
  aws_assume_role: lbh-hackit/aws_assume_role@0.1.0

parameters:
  run_development_workflow:
    description: This will run by default when a code commit or merge is performed
    default: true
    type: boolean

  run_disaster_recovery_workflow:
    description: This will run by default when a code commit or merge is performed
    default: true
    type: boolean

  run_staging_workflow:
    default: true
    type: boolean

  run_production_workflow:
    default: true
    type: boolean

references:
  workspace_root: &workspace_root "~"
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

executors:
  node-executor:
    docker:
      - image: cimg/node:16.20.2-browsers
  docker-terraform:
    docker:
      - image: "hashicorp/terraform:light"
  docker-python:
    docker:
      - image: circleci/python:3.7
  cimg-base:
    docker:
      - image: cimg/base:2021.05

commands:
  assume-role-and-persist-workspace:
    description: "Assume deployment role and persist credentials across jobs"
    parameters:
      aws-account:
        type: string
    steps:
      - checkout
      - aws_assume_role/assume_role:
          account: <<parameters.aws-account>>
          profile_name: default
          role: "LBH_Circle_CI_Deployment_Role"
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .aws

  terraform-init-then-apply:
    description: "Initialize and apply the terraform configuration"
    parameters:
      environment:
        type: string
      app:
        type: string
    steps:
      - checkout
      - *attach_workspace
      - run:
          name: Get and init <<parameters.app>>
          command: |
            cd ./apps/<<parameters.app>>/terraform/<<parameters.environment>>/
            terraform get -update=true
            terraform init
      - run:
          name: Apply  <<parameters.app>>
          command: |
            cd ./apps/<<parameters.app>>/terraform/<<parameters.environment>>/
            terraform apply -auto-approve

jobs:
  install-dependencies-app:
    executor: node-executor
    parameters:
      app:
        type: string
    steps:
      - *attach_workspace
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "yarn.lock" }}
      - run:
          name: Install <<parameters.app>> dependencies
          command: cd ./apps/<<parameters.app>> && yarn
      - save_cache:
          key: dependency-cache-{{ checksum "yarn.lock" }}
          paths:
            - ./**/**/node_modules
      - persist_to_workspace:
          root: *workspace_root
          paths: [./project/apps/<<parameters.app>>/node_modules]
  lint-and-test:
    executor: node-executor
    steps:
      - checkout
      - *attach_workspace
      - run:
          name: Run linter
          command: cd ./apps/single-view/ && yarn lint
      - run:
          name: Run unit test
          command: cd ./apps/single-view/ && yarn test

  build-and-deploy-auth:
    executor: node-executor
    environment:
      aws-region: eu-west-2
    parameters:
      stage:
        type: string
    steps:
      - checkout
      - *attach_workspace
      - aws-cli/install
      - run:
          name: Build auth
          command: |
            cd apps/auth/
            export APP_ENV=<<parameters.stage>>
            export APP_CDN=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/auth-app-url --query Parameter.Value --output text)
            yarn build
      - run:
          name: Deploy to S3 auth
          command: |
            cd apps/auth/
            aws s3 sync dist s3://lbh-single-view-auth-frontend-<<parameters.stage>>.hackney.gov.uk/ --exclude "*.json" --cache-control "public, immutable, max-age=31536000"
            aws s3 sync dist s3://lbh-single-view-auth-frontend-<<parameters.stage>>.hackney.gov.uk/ --include "*.json" --cache-control "public, must-revalidate, max-age=0"

  build-and-deploy-common:
    executor: node-executor
    environment:
      aws-region: eu-west-2
    parameters:
      stage:
        type: string
    steps:
      - checkout
      - *attach_workspace
      - aws-cli/install
      - run:
          name: Build common
          command: |
            cd apps/common/
            export APP_ENV=<<parameters.stage>>
            export APP_CDN=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/common-app-url --query Parameter.Value --output text)
            export AUTH_ALLOWED_GROUPS=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/auth-allowed-groups --query Parameter.Value --output text)
            export AUTH_DOMAIN=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/auth-domain --query Parameter.Value --output text)
            export COOKIE_DOMAIN=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/cookie-domain --query Parameter.Value --output text)
            export AUTH_TOKEN_NAME=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/auth-token-name --query Parameter.Value --output text)
            export CONFIGURATION_API_URL_V1=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/configuration-api-url --query Parameter.Value --output text)
            yarn build
      - run:
          name: Deploy to S3 common
          command: |
            cd apps/common/
            aws s3 sync dist s3://lbh-single-view-common-frontend-<<parameters.stage>>.hackney.gov.uk/ --exclude "*.json" --cache-control "public, immutable, max-age=31536000"
            aws s3 sync dist s3://lbh-single-view-common-frontend-<<parameters.stage>>.hackney.gov.uk/ --include "*.json" --cache-control "public, must-revalidate, max-age=0"
  build-and-deploy-header:
    executor: node-executor
    environment:
      aws-region: eu-west-2
    parameters:
      stage:
        type: string
    steps:
      - checkout
      - *attach_workspace
      - aws-cli/install
      - run:
          name: Build header
          command: |
            cd apps/header/
            export APP_ENV=<<parameters.stage>>
            export APP_CDN=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/header-app-url --query Parameter.Value --output text)
            yarn build
      - run:
          name: Deploy to S3 header
          command: |
            cd apps/header/
            aws s3 sync dist s3://lbh-single-view-header-frontend-<<parameters.stage>>.hackney.gov.uk/ --exclude "*.json" --cache-control "public, immutable, max-age=31536000"
            aws s3 sync dist s3://lbh-single-view-header-frontend-<<parameters.stage>>.hackney.gov.uk/ --include "*.json" --cache-control "public, must-revalidate, max-age=0"
  build-and-deploy-root:
    executor: node-executor
    environment:
      aws-region: eu-west-2
    parameters:
      stage:
        type: string
    steps:
      - checkout
      - *attach_workspace
      - aws-cli/install
      - run:
          name: Build root
          command: |
            cd apps/root/
            export ROOT_APP_URL=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/root-app-url --query Parameter.Value --output text)
            export SINGLE_VIEW_APP_URL=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/app-url --query Parameter.Value --output text)
            export HOUSING_SEARCH_API_V1=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/housing-search-v1 --query Parameter.Value --output text)

            export HEADER_APP_URL=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/header-app-url --query Parameter.Value --output text)
            export AUTH_APP_URL=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/auth-app-url --query Parameter.Value --output text)
            export COMMON_APP_URL=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/common-app-url --query Parameter.Value --output text)
            yarn build:webpack
      - run:
          name: Deploy to S3 root
          command: |
            cd apps/root/
            aws s3 sync dist s3://lbh-single-view-root-frontend-<<parameters.stage>>.hackney.gov.uk/ --exclude "*.json" --cache-control "public, immutable, max-age=31536000"
            aws s3 sync dist s3://lbh-single-view-root-frontend-<<parameters.stage>>.hackney.gov.uk/ --include "*.json" --cache-control "public, must-revalidate, max-age=0"
  build-and-deploy-single-view:
    executor: node-executor
    environment:
      aws-region: eu-west-2
    parameters:
      stage:
        type: string
    steps:
      - checkout
      - *attach_workspace
      - aws-cli/install
      - run:
          name: Build single view
          command: |
            cd apps/single-view/
            export APP_ENV=<<parameters.stage>>
            export APP_CDN=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/app-url --query Parameter.Value --output text)
            export NOTES_API_V2=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/notes-v2 --query Parameter.Value --output text)
            export SV_API_V1=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/sv-api-url --query Parameter.Value --output text)
            export MMH_URL=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/mmh-url --query Parameter.Value --output text)
            export MA_URL=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/ma-url --query Parameter.Value --output text)
            export JIGSAW_URL=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/jigsaw-url --query Parameter.Value --output text)
            export RSA_PUBLIC_KEY=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/rsa_public_key --query Parameter.Value --output text)
            export SHARED_PLAN_URL=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/shared_plan_url --query Parameter.Value --output text)
            export DISPLAY_SHARED_PLAN=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/display_shared_plan --query Parameter.Value --output text)
            yarn build
      - run:
          name: Deploy to S3 single view
          command: |
            cd apps/single-view/
            aws s3 sync dist s3://lbh-single-view-frontend-<<parameters.stage>>.hackney.gov.uk/ --exclude "*.json" --cache-control "public, immutable, max-age=31536000"
            aws s3 sync dist s3://lbh-single-view-frontend-<<parameters.stage>>.hackney.gov.uk/ --include "*.json" --cache-control "public, must-revalidate, max-age=0"

  e2e:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: Install
          command: yarn install
      - run:
          name: Install apps
          command: yarn install-ci
      - run:
          name: Set AUTH_ALLOWED_GROUPS
          command: |
            cd apps/common
            touch .env
            echo "AUTH_ALLOWED_GROUPS=cypress-users" >> .env
      - run:
          name: Set single-view params
          command: |
            cd apps/single-view
            cp .env.sample .env
      - run:
          name: Run E2E
          command: yarn e2e
      - store_artifacts:
          path: ~/project/cypress/screenshots
      - store_artifacts:
          path: ~/project/cypress/videos

  assume-role-development:
    executor: docker-python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_DEVELOPMENT

  
  assume-role-disaster-recovery:
    executor: docker-python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_DISASTER_RECOVERY

  assume-role-staging:
    executor: docker-python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_STAGING

  assume-role-production:
    executor: docker-python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_PRODUCTION

  terraform-init-and-apply:
    executor: docker-terraform
    parameters:
      app:
        type: string
      environment:
        type: string
    steps:
      - terraform-init-then-apply:
          environment: <<parameters.environment>>
          app: <<parameters.app>>

workflows:
  version: 2
  cypress:
    jobs:
      - e2e
      - install-dependencies-app:
          app: "single-view"
      - lint-and-test:
          requires:
            - install-dependencies-app

  continuous-delivery-disaster-recovery-auth:
    # when: << pipeline.parameters.run_disaster-recovery_workflow >>
    jobs:
      - install-dependencies-app:
          app: "auth"
          filters:
            branches:
              only: dr-testing
      - assume-role-disaster-recovery:
          context: api-assume-role-disaster-recover-context
          requires:
            - install-dependencies-app
          filters:
            branches:
              only: dr-testing
      - terraform-init-and-apply:
          app: "auth"
          environment: "disaster-recovery"
          requires:
            - assume-role-disaster-recovery
          filters:
            branches:
              only: disaster-recovery
      - build-and-deploy-auth:
          stage: "disaster-recovery"
          requires:
            - terraform-init-and-apply
          filters:
            branches:
              only: dr-testing
  continuous-delivery-disaster-recovery-common:
    # when: << pipeline.parameters.run_disaster_recovery_workflow >>
    jobs:
      - install-dependencies-app:
          app: "common"
          filters:
            branches:
              only: dr-testing
      - assume-role-disaster-recovery:
          context: api-assume-role-disaster-recovery-context
          requires:
            - install-dependencies-app
          filters:
            branches:
              only: dr-testing
      - terraform-init-and-apply:
          app: "common"
          environment: "disaster-recovery"
          requires:
            - assume-role-disaster-recovery
          filters:
            branches:
              only: dr-testing
      - build-and-deploy-common:
          stage: "disaster-recovery"
          requires:
            - terraform-init-and-apply
          filters:
            branches:
              only: dr-testing
  continuous-delivery-disaster-recovery-header:
    # when: << pipeline.parameters.run_disaster_recovery_workflow >>
    jobs:
      - install-dependencies-app:
          app: "header"
          filters:
            branches:
              only: dr-testing
      - assume-role-disaster-recovery:
          context: api-assume-role-disaster-recovery-context
          requires:
            - install-dependencies-app
          filters:
            branches:
              only: dr-testing
      - terraform-init-and-apply:
          app: "header"
          environment: "production"
          requires:
            - assume-role-disaster-recovery
          filters:
            branches:
              only: dr-testing
      - build-and-deploy-header:
          stage: "production"
          requires:
            - terraform-init-and-apply
          filters:
            branches:
              only: dr-testing
  continuous-delivery-disaster-recovery-root:
    # when: << pipeline.parameters.run_disaster_recovery_workflow >>
    jobs:
      - install-dependencies-app:
          app: "root"
          filters:
            branches:
              only: dr-testing
      - assume-role-disaster-recovery:
          context: api-assume-role-disaster-recovery-context
          requires:
            - install-dependencies-app
          filters:
            branches:
              only: dr-testing
      - terraform-init-and-apply:
          app: "root"
          environment: "production"
          requires:
            - assume-role-disaster-recovery
          filters:
            branches:
              only: dr-testing
      - build-and-deploy-root:
          stage: "production"
          requires:
            - terraform-init-and-apply
          filters:
            branches:
              only: dr-testing
  continuous-delivery-disaster-recovery-single-view:
    # when: << pipeline.parameters.run_disaster_recovery_workflow >>
    jobs:
      - e2e:
          filters:
            branches:
              only: dr-testing
      - install-dependencies-app:
          app: "single-view"
          filters:
            branches:
              only: dr-testing
      - lint-and-test:
          requires:
            - install-dependencies-app
          filters:
            branches:
              only: dr-testing
      - assume-role-disaster-recovery:
          context: api-assume-role-disaster-recovery-context
          requires:
            - lint-and-test
            # - e2e
          filters:
            branches:
              only: dr-testing
      - terraform-init-and-apply:
          app: "single-view"
          environment: "production"
          requires:
            - assume-role-disaster-recovery
          filters:
            branches:
              only: dr-testing
      - build-and-deploy-single-view:
          stage: "production"
          requires:
            - terraform-init-and-apply
          filters:
            branches:
              only: dr-testing