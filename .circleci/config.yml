version: 2.1

orbs:
  aws-s3: circleci/aws-s3@2.0.0
  aws-cli: circleci/aws-cli@2.0.0
  aws_assume_role: lbh-hackit/aws_assume_role@0.1.0

parameters:
  run_development_workflow:
    description: This will run by default when a code commit or merge is performed
    default: true
    type: boolean

  run_staging_workflow:
    default: false
    type: boolean

  run_production_workflow:
    default: false
    type: boolean

  e2e_test_failure:
    description: Run the failure workflow if the e2e tests fail downstream
    default: false
    type: boolean

references:
  workspace_root: &workspace_root "~"
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

executors:
  node-executor:
    docker:
      - image: circleci/node:14.17.0-browsers
  docker-terraform:
    docker:
      - image: "hashicorp/terraform:light"
  docker-python:
    docker:
      - image: circleci/python:3.7
  cimg-base:
    docker:
      - image: cimg/base:2021.05

commands:
  assume-role-and-persist-workspace:
    description: "Assume deployment role and persist credentials across jobs"
    parameters:
      aws-account:
        type: string
    steps:
      - checkout
      - aws_assume_role/assume_role:
          account: <<parameters.aws-account>>
          profile_name: default
          role: "LBH_Circle_CI_Deployment_Role"
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .aws

  terraform-init-then-apply:
    description: "Initialize and apply the terraform configuration"
    parameters:
      environment:
        type: string
    steps:
      - *attach_workspace
      - checkout
      - run:
          name: get and init auth
          command: |
            cd ./apps/auth/terraform/<<parameters.environment>>/
            terraform get -update=true
            terraform init
      - run:
          name: apply auth
          command: |
            cd ./apps/auth/terraform/<<parameters.environment>>/
            terraform apply -auto-approve
      - run:
          name: get and init common
          command: |
            cd ./apps/common/terraform/<<parameters.environment>>/
            terraform get -update=true
            terraform init
      - run:
          name: apply common
          command: |
            cd ./apps/common/terraform/<<parameters.environment>>/
            terraform apply -auto-approve
jobs:
  install-dependencies:
    executor: node-executor
    steps:
      - *attach_workspace
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "yarn.lock" }}
      - run:
          name: Install auth dependencies
          command: cd ./apps/auth && yarn
      - run:
          name: Install common dependencies
          command: cd ./apps/common && yarn
      - run:
          name: Install header dependencies
          command: cd ./apps/header && yarn
      - save_cache:
          key: dependency-cache-{{ checksum "yarn.lock" }}
          paths:
            - ./**/**/node_modules
      - persist_to_workspace:
          root: *workspace_root
          paths: .
  lint-and-test:
    executor: node-executor
    steps:
      - *attach_workspace
      - run:
          name: debug
          command: |
            pwd
            ls -al
      - run:
          name: Run auth linter
          command: cd apps/auth/ && yarn lint
      - run:
          name: Run auth unit test
          command: cd apps/auth/ && yarn test
      - run:
          name: Run common linter
          command: cd apps/common/ && yarn lint
      - run:
          name: Run common unit test
          command: cd apps/common/ && yarn test
  build-deploy-development:
    executor: node-executor
    environment:
      aws-region: eu-west-2
    parameters:
      stage:
        type: string
    steps:
      - *attach_workspace
      - aws-cli/install
      - run:
          name: build auth
          command: |
            cd apps/auth/
            export APP_ENV=<<parameters.stage>>
            export APP_CDN=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/auth-app-url --query Parameter.Value --output text)
            yarn build
      - run:
          name: Deploy to S3 auth
          command: |
            cd apps/auth/
            aws s3 sync dist s3://lbh-single-view-auth-frontend-development.hackney.gov.uk/ --exclude "*.json" --cache-control "public, immutable, max-age=31536000"
            aws s3 sync dist s3://lbh-single-view-auth-frontend-development.hackney.gov.uk/ --include "*.json" --cache-control "public, must-revalidate, max-age=0"
      - run:
          name: build common
          command: |
            cd apps/common/
            export APP_ENV=development
            export APP_CDN=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/common-app-url --query Parameter.Value --output text)
            export AUTH_ALLOWED_GROUPS=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/auth-allowed-groups --query Parameter.Value --output text)
            export AUTH_DOMAIN=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/auth-domain --query Parameter.Value --output text)
            export COOKIE_DOMAIN=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/cookie-domain --query Parameter.Value --output text)
            export AUTH_TOKEN_NAME=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/auth-token-name --query Parameter.Value --output text)
            export CONFIGURATION_API_URL_V1=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/configuration-api-url --query Parameter.Value --output text)
            export CONTACT_DETAILS_API_URL_V1=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/contact-details-api-url --query Parameter.Value --output text)
            export CONTACT_DETAILS_API_URL_V2=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/contact-details-api-url-v2 --query Parameter.Value --output text)
            export PERSON_API_URL_V1=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/person-api-url --query Parameter.Value --output text)
            export PERSON_API_URL_V2=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/person-api-url-v2 --query Parameter.Value --output text)
            export NOTES_API_URL_V1=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/notes-api-url --query Parameter.Value --output text)
            export NOTES_API_URL_V2=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/notes-api-url-v2 --query Parameter.Value --output text)
            export TENURE_API_URL_V1=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/tenure-api-url --query Parameter.Value --output text)
            export PROPERTY_API_URL_V1=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/property-api-url --query Parameter.Value --output text)
            export REFERENCE_DATA_API_URL_V1=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/reference-data-api-url --query Parameter.Value --output text)
            export ADDRESS_API_URL_V1=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/address-api-url --query Parameter.Value --output text)
            export EQUALITY_INFORMATION_API_URL_V1=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/equality-information-api-url --query Parameter.Value --output text)
            export REPAIRS_HUB_APP_URL=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/repairs-hub-app-url --query Parameter.Value --output text)
            export REPAIRS_HUB_API_URL=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/repairs-hub-api-url --query Parameter.Value --output text)
            export PROCESS_API_URL_V1=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/process-api-url-v1 --query Parameter.Value --output text)
            yarn build
      - run:
          name: Deploy to S3 common
          command: |
            cd apps/common/
            aws s3 sync dist s3://lbh-single-view-common-frontend-development.hackney.gov.uk/ --exclude "*.json" --cache-control "public, immutable, max-age=31536000"
            aws s3 sync dist s3://lbh-single-view-common-frontend-development.hackney.gov.uk/ --include "*.json" --cache-control "public, must-revalidate, max-age=0"
  build-deploy-staging:
    executor: node-executor
    environment:
      aws-region: eu-west-2
    parameters:
      stage:
        type: string
    steps:
      - *attach_workspace
      - aws-cli/install
      - run:
          name: build auth
          command: |
            cd apps/auth/
            export APP_ENV=<<parameters.stage>>
            export APP_CDN=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/auth-app-url --query Parameter.Value --output text)
            yarn build
      - run:
          name: Deploy to S3 auth
          command: |
            cd apps/auth/
            aws s3 sync dist s3://lbh-single-view-auth-frontend-staging.hackney.gov.uk/ --exclude "*.json" --cache-control "public, immutable, max-age=31536000"
            aws s3 sync dist s3://lbh-single-view-auth-frontend-staging.hackney.gov.uk/ --include "*.json" --cache-control "public, must-revalidate, max-age=0"
      - run:
          name: build common
          command: |
            cd apps/common
            export APP_ENV=staging
            export APP_CDN=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/common-app-url --query Parameter.Value --output text)
            export AUTH_ALLOWED_GROUPS=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/auth-allowed-groups --query Parameter.Value --output text)
            export AUTH_DOMAIN=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/auth-domain --query Parameter.Value --output text)
            export COOKIE_DOMAIN=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/cookie-domain --query Parameter.Value --output text)
            export AUTH_TOKEN_NAME=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/auth-token-name --query Parameter.Value --output text)
            export CONFIGURATION_API_URL_V1=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/configuration-api-url --query Parameter.Value --output text)
            export CONTACT_DETAILS_API_URL_V1=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/contact-details-api-url --query Parameter.Value --output text)
            export CONTACT_DETAILS_API_URL_V2=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/contact-details-api-url-v2 --query Parameter.Value --output text)
            export PERSON_API_URL_V1=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/person-api-url --query Parameter.Value --output text)
            export PERSON_API_URL_V2=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/person-api-url-v2 --query Parameter.Value --output text)
            export NOTES_API_URL_V1=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/notes-api-url --query Parameter.Value --output text)
            export NOTES_API_URL_V2=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/notes-api-url-v2 --query Parameter.Value --output text)
            export TENURE_API_URL_V1=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/tenure-api-url --query Parameter.Value --output text)
            export PROPERTY_API_URL_V1=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/property-api-url --query Parameter.Value --output text)
            export REFERENCE_DATA_API_URL_V1=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/reference-data-api-url --query Parameter.Value --output text)
            export ADDRESS_API_URL_V1=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/address-api-url --query Parameter.Value --output text)
            export EQUALITY_INFORMATION_API_URL_V1=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/equality-information-api-url --query Parameter.Value --output text)
            export REPAIRS_HUB_APP_URL=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/repairs-hub-app-url --query Parameter.Value --output text)
            export REPAIRS_HUB_API_URL=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/repairs-hub-api-url --query Parameter.Value --output text)
            export PROCESS_API_URL_V1=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/process-api-url-v1 --query Parameter.Value --output text)
            yarn build
      - run:
          name: Deploy to S3 common
          command: |
            cd apps/common/
            aws s3 sync dist s3://lbh-single-view-common-frontend-staging.hackney.gov.uk/ --exclude "*.json" --cache-control "public, immutable, max-age=31536000"
            aws s3 sync dist s3://lbh-single-view-common-frontend-staging.hackney.gov.uk/ --include "*.json" --cache-control "public, must-revalidate, max-age=0"
  build-deploy-production:
    executor: node-executor
    environment:
      aws-region: eu-west-2
    parameters:
      stage:
        type: string
    steps:
      - *attach_workspace
      - aws-cli/install
      - run:
          name: build auth
          command: |
            cd apps/auth/
            export APP_ENV=<<parameters.stage>>
            export APP_CDN=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/auth-app-url --query Parameter.Value --output text)
            yarn build
      - run:
          name: Deploy to S3 auth
          command: |
            cd apps/auth/
            aws s3 sync dist s3://lbh-single-view-auth-frontend-production.hackney.gov.uk/ --exclude "*.json" --cache-control "public, immutable, max-age=31536000"
            aws s3 sync dist s3://lbh-single-view-auth-frontend-production.hackney.gov.uk/ --include "*.json" --cache-control "public, must-revalidate, max-age=0"
      - run:
          name: build common
          command: |
            cd apps/common/
            export APP_ENV=production
            export APP_CDN=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/common-app-url --query Parameter.Value --output text)
            export AUTH_ALLOWED_GROUPS=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/auth-allowed-groups --query Parameter.Value --output text)
            export AUTH_DOMAIN=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/auth-domain --query Parameter.Value --output text)
            export COOKIE_DOMAIN=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/cookie-domain --query Parameter.Value --output text)
            export AUTH_TOKEN_NAME=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/auth-token-name --query Parameter.Value --output text)
            export CONFIGURATION_API_URL_V1=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/configuration-api-url --query Parameter.Value --output text)
            export CONTACT_DETAILS_API_URL_V1=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/contact-details-api-url --query Parameter.Value --output text)
            export CONTACT_DETAILS_API_URL_V2=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/contact-details-api-url-v2 --query Parameter.Value --output text)
            export PERSON_API_URL_V1=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/person-api-url --query Parameter.Value --output text)
            export PERSON_API_URL_V2=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/person-api-url-v2 --query Parameter.Value --output text)
            export NOTES_API_URL_V1=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/notes-api-url --query Parameter.Value --output text)
            export NOTES_API_URL_V2=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/notes-api-url-v2 --query Parameter.Value --output text)
            export TENURE_API_URL_V1=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/tenure-api-url --query Parameter.Value --output text)
            export PROPERTY_API_URL_V1=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/property-api-url --query Parameter.Value --output text)
            export REFERENCE_DATA_API_URL_V1=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/reference-data-api-url --query Parameter.Value --output text)
            export ADDRESS_API_URL_V1=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/address-api-url --query Parameter.Value --output text)
            export EQUALITY_INFORMATION_API_URL_V1=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/equality-information-api-url --query Parameter.Value --output text)
            export REPAIRS_HUB_APP_URL=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/repairs-hub-app-url --query Parameter.Value --output text)
            export REPAIRS_HUB_API_URL=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/repairs-hub-api-url --query Parameter.Value --output text)
            export PROCESS_API_URL_V1=$(aws ssm get-parameter --name /single-view/<<parameters.stage>>/process-api-url-v1 --query Parameter.Value --output text)
            yarn build
      - run:
          name: Deploy to S3 common
          command: |
            cd apps/common/
            aws s3 sync dist s3://lbh-single-view-common-frontend-production.hackney.gov.uk/ --exclude "*.json" --cache-control "public, immutable, max-age=31536000"
            aws s3 sync dist s3://llbh-single-view-common-frontend-production.hackney.gov.uk/ --include "*.json" --cache-control "public, must-revalidate, max-age=0"

  assume-role-development:
    executor: docker-python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_DEVELOPMENT

  assume-role-staging:
    executor: docker-python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_STAGING

  assume-role-production:
    executor: docker-python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_PRODUCTION

  terraform-init-and-apply-to-development:
    executor: docker-terraform
    steps:
      - terraform-init-then-apply:
          environment: "development"

  terraform-init-and-apply-to-staging:
    executor: docker-terraform
    steps:
      - terraform-init-then-apply:
          environment: "staging"

  terraform-init-and-apply-to-production:
    executor: docker-terraform
    steps:
      - terraform-init-then-apply:
          environment: "production"

workflows:
  version: 2
  continuous-delivery-development:
    when: << pipeline.parameters.run_development_workflow >>
    jobs:
      - install-dependencies
      - lint-and-test:
          requires:
            - install-dependencies
      - assume-role-development:
          context: api-assume-role-corporate-development-context
          requires:
            - lint-and-test
          filters:
            branches:
              only: development
      - terraform-init-and-apply-to-development:
          requires:
            - assume-role-development
          filters:
            branches:
              only: development
      - build-deploy-development:
          stage: "development"
          requires:
            - terraform-init-and-apply-to-development
          filters:
            branches:
              only: development

  continuous-delivery-staging:
    when: << pipeline.parameters.run_staging_workflow >>
    jobs:
      - permit-deploy-staging:
          type: approval
          filters:
            branches:
              only: main
      - install-dependencies:
          requires:
            - permit-deploy-staging
      - lint-and-test:
          requires:
            - install-dependencies
      - assume-role-staging:
          context: api-assume-role-corporate-staging-context
          requires:
            - lint-and-test
          filters:
            branches:
              only: main
      - terraform-init-and-apply-to-staging:
          requires:
            - assume-role-staging
          filters:
            branches:
              only: main
      - build-deploy-staging:
          stage: "staging"
          requires:
            - terraform-init-and-apply-to-staging
          filters:
            branches:
              only: main

  continuous-delivery-production:
    when: << pipeline.parameters.run_production_workflow >>
    jobs:
      - permit-production-terraform-release:
          type: approval
          filters:
            branches:
              only: main
      - install-dependencies:
          requires:
            - permit-production-terraform-release
      - lint-and-test:
          requires:
            - install-dependencies
      - assume-role-production:
          context: api-assume-role-corporate-production-context
          requires:
            - lint-and-test
          filters:
            branches:
              only: main
      - terraform-init-and-apply-to-production:
          requires:
            - assume-role-production
          filters:
            branches:
              only: main
      - build-deploy-production:
          stage: "production"
          requires:
            - terraform-init-and-apply-to-production
          filters:
            branches:
              only: main
